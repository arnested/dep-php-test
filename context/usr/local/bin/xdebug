#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

# Disable is done on exit, this means that no matter what happens (eg the
# user doing a ^C) we will attempt to re-disable xdebug.
function disable {
	sudo docker-php-ext-disable-xdebug
	if should_use_internal_hostname; then
		sudo docker-php-ext-disable-xdebug-use-docker-client-host
	fi
	/usr/local/bin/reload
	exit $?
}

# Test whether it's ok to use host.docker.internal for xdebug.client_host.
#
# See https://docs.docker.com/docker-for-mac/networking regarding
# host.docker.internal
function should_use_internal_hostname {
	# Make sure the the user is not providing a client_host and we can look up
	# hosts host.docker.internal.
	[[ ! ${XDEBUG_CONFIG:-} == *"client_host"* ]] && getent hosts host.docker.internal >/dev/null
}

# Trap exit
trap disable EXIT

# First step is to enable xdebug.
sudo docker-php-ext-enable-xdebug
if should_use_internal_hostname; then
	sudo docker-php-ext-enable-xdebug-use-docker-client-host
	echo '- setting host.docker.internal as client_host'
fi

/usr/local/bin/reload

# Then we prompt the user.
echo ""
read -r -p "*** Xdebug enabled, press enter to disable again ***"
echo ""

# When we reach this point the script exists, and triggers our trap.
